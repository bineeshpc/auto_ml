---
# Configuration file for automating the tasks of machine learning competion
# every data goes under output_location
# certain module level configurations are also possible


competition_name: &competition_name house-prices-advanced-regression-techniques
# output location is the directory where the output and log files are generated
# I might need to create a separete directory for logs within the output directory later

output_location: &output_location !join [/tmp, !join_underscore [*competition_name, predictor] ]

# location of source files
src_location: &src_location /home/bineesh/Dropbox/competition/endtoend

input_location: &input_location !join [/home/bineesh/Dropbox/competition/endtoend, *competition_name]
configfile : &configfile !join [*src_location, predictor.yml]


# generate graphs based on input data
# generate figures as well as ipython notebooks

exploratory_data_analysis: 
  program: exploratory_data_analysis.py
  log_location: exploratory_data_analysis.log
  directory: exploratory_data_analysis

# split the data as hold out set
# then to train test split etc for cross validation
splitter: 
  program: splitter.py
  log_location: splitter.log
  directory: splitter
# Data can be of type numerical, categorical, text, image etc
generate_datatypes: 
  program: generate_datatypes.py
  log_location: generate_datatypes.log
  directory: generate_datatypes
  categorical:
    - Sex
    - Embarked

transformer:
  program: transformer.py
  log_location: transformer.log
  directory: transformer
  

# stacker to horizontally stack different features
# for example combine different data types

stacker: 
  program: stacker.py
  log_location: stacker.log
  directory: stacker


# Some transformations can only be done using full data
# and not with data split based on types
# do those transformations after stacker step

post_stacker_transformer: 
  program: post_stacker_transformer.py
  log_location: post_stacker_transformer.log
  directory: post_stacker_transformer


# Feature selector can select features after the stacking step

feature_selector: 
  program: feature_selector.py
  log_location: feature_selector.log
  directory: feature_selector

# Model selector

model_selector: 
  program: model_selector.py
  log_location: model_selector.log
  directory: model_selector
  problem_type: regression
  model_filename: winning_model.pkl
    # classification: false
  
# Hyper parameter selector

hyper_parameter_selector: 
  program: hyper_parameter_selector.py
  log_location: hyper_parameter_selector.log
  directory: hyper_parameter_selector
  problem_type: classification
  model_filename: winning_model.pkl

# evaluator

predictor: 
  program: predictor.py
  log_location: predictor.log
  directory: predictor
  prediction_file: prediction.csv


run_endtoend:
  program: run_endtoend.py
  log_location: run_endtoend.log
  directory: run_endtoend
  configfile: *configfile
  order: 
    - exploratory_data_analysis
    - generate_datatypes
    - transformer
    - stacker
    - post_stacker_transformer
    - splitter
    - feature_selector
    - model_selector
    - hyper_parameter_selector
    - predictor

  exploratory_data_analysis:
    order: 
      - input_file
      - configfile
    location:
      - None
      - None
    run: no
    input_file: !join [*input_location , test.csv]
    configfile: *configfile

  generate_datatypes:
    order:
      - X_train
      - configfile
    location:
      - None
      - None
    run: yes
    X_train: !join [*input_location , test.csv]
    configfile: *configfile
    
  transformer:
    order:
      - bool_
      - categorical
      - text
      - numerical
      - configfile
    location:
      - generate_datatypes
      - generate_datatypes
      - generate_datatypes
      - generate_datatypes
      - None
    run: yes
    bool_: bool_.csv
    categorical: categorical.csv
    text: text.csv
    numerical: numerical.csv
    configfile: *configfile

  stacker:
    order:
      - bool_
      - categorical
      - text
      - numerical
      - configfile
    location:
      - transformer
      - transformer
      - transformer
      - transformer
      - None
    run: yes
    bool_: bool_.csv
    categorical: categorical.csv
    text: text.csv
    numerical: numerical.csv
    configfile: *configfile


  post_stacker_transformer:
    order:
      - X_train
      - configfile
    location:
      - stacker
      - None
    run: yes
    X_train: X_train.csv
    configfile: *configfile
      

  splitter:
    order:
      - input_file
      - y_column
      - configfile
    location:
      - post_stacker_transformer
      - None
      - None
    run: no
    input_file: X_train.csv 
    y_column: SalePrice
    configfile: *configfile


  feature_selector:
    order:
      - X_train
      - y_train
      - configfile
    location:
      - splitter
      - splitter
      - None
    run: no
    X_train: X_train.csv
    y_train: y_train.csv
    configfile: *configfile
  
  model_selector:
    order:
      - X_train
      - y_train
      - problem_type
      - configfile
    location:
      - feature_selector
      - feature_selector
      - None
      - None
    run: no
    X_train: X_train.csv
    y_train: y_train.csv
    problem_type: regression
    configfile: *configfile

  hyper_parameter_selector:
    order:
      - X_train
      - y_train
      - problem_type
    location:
      - feature_selector
      - feature_selector
      - None
    run: no
    X_train: X_train.csv
    y_train: y_train.csv
    problem_type: regression

  predictor:
    order:
      - X_test
      - y_column
      - winning_model
      - problem_type
      - configfile
    location:
      - post_stacker_transformer
      - None
      - None
      - None
      - None
    run: yes
    X_test: X_train.csv
    y_column: SalePrice
    winning_model: /tmp/house-prices-advanced-regression-techniques/hyper_parameter_selector/winning_model.pkl
    #winning_model: /tmp/competition/hyper_parameter_selector/winning_model.pkl
    # winning_model: /tmp/competition/model_selector/winning_model.pkl
    problem_type: regression # can be classification or regression
    configfile: *configfile
    